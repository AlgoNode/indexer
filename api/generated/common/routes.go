// Package common provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package common

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns 200 if healthy.
	// (GET /health)
	MakeHealthCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// MakeHealthCheck converts echo context to params.
func (w *ServerInterfaceWrapper) MakeHealthCheck(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MakeHealthCheck(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/health", wrapper.MakeHealthCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"nfX4zv8PAAD//0EQU4LY/AAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
