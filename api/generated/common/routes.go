// Package common provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package common

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns 200 if healthy.
	// (GET /health)
	MakeHealthCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// MakeHealthCheck converts echo context to params.
func (w *ServerInterfaceWrapper) MakeHealthCheck(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MakeHealthCheck(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/health", wrapper.MakeHealthCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"//+2hX1b5vwAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
