// Package common provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package common

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns 200 if healthy.
	// (GET /health)
	MakeHealthCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// MakeHealthCheck converts echo context to params.
func (w *ServerInterfaceWrapper) MakeHealthCheck(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MakeHealthCheck(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/health", wrapper.MakeHealthCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"uvpEWd8O0cDnkfoo7XB8WGQeS2DEpkSzNxkc+5kbx6XnqK7HIdIfrdDQ1Z+npwFrrXQdH98xN2xTBUfs",
	"d1G+hTitJXtJ5N9676McKynJm0/yTF4svnJod71un8fmA0bCLRWlBJKW57atSTh75keazWe1LmdPZ2tr",
	"K/P0/Hy73Z6Fac5ytTlfYWhwZlWdr8/DQJi4vJNv1HfxZfPdtVvurcgNe/bmJQrJwpaAgYG4dVFJlKez",
	"J2ePKNk3SF6J2dPZV2ePzh7TEVkjXZxToRr33xWF8zmqQUn4ZYF5W64gLnXj7hgqZoPdnzx6FJbBq4mR",
	"e8L5Pw0xtGmuH/E0uMjdhXiA7+kPaYWWvC4T6tlP8kqqrWR/11oRgzT1ZsP1HtOG2FpLw548esTE0hfo",
	"oWxZ3Ilp72eUxmL2i+t3fv3kPPLa7f1y/kfwNRPFhyOfz3lVmSzyhDnaPrgTHWyVCH2f3mfSDDHPidqm",
	"54t+Pf+j66LyYWKzc0oRPLUpTJ3+3MezhbZ95PHv8z/C09KHA5/OfS6nQ91H1q1T0ab3szn/g6KHyIIR",
	"QZAeq3Mb/GF3Hmg09OprHP/9Hz32Azu+qUpAzjP78EtD9Q3j8tT/Yd78Uip1VVfxLwa4ztfYfZcpLVZC",
	"Oqre8tUKdNbjO/8/AAD//66djAMa/QAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
