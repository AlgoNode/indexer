// Package common provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package common

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns 200 if healthy.
	// (GET /health)
	MakeHealthCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// MakeHealthCheck converts echo context to params.
func (w *ServerInterfaceWrapper) MakeHealthCheck(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MakeHealthCheck(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/health", wrapper.MakeHealthCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"+X8BAAD//675AmFa9QAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
