// Package common provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package common

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns 200 if healthy.
	// (GET /health)
	MakeHealthCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// MakeHealthCheck converts echo context to params.
func (w *ServerInterfaceWrapper) MakeHealthCheck(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MakeHealthCheck(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/health", wrapper.MakeHealthCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
